generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  email     String         @unique
  password  String
  name      String
  createdAt DateTime       @default(now())
  avatar    String?
  address   String?
  isLocal   Boolean        @default(false)
  lists     List[]
  likes     ListLike[]
  locations UserLocation[]
}

model Country {
  id     String  @id @default(cuid())
  name   String  @unique
  code   String? @unique
  slug   String? @unique
  cities City[]
}

model City {
  id            String         @id @default(cuid())
  countryId     String
  name          String
  slug          String?
  lat           Float?
  lng           Float?
  listCount     Int            @default(0)
  googlePlaceId String?        @unique
  country       Country        @relation(fields: [countryId], references: [id])
  lists         List[]
  places        Place[]
  userLocations UserLocation[]

  @@unique([countryId, name])
  @@index([countryId])
}

model Place {
  id              String      @id @default(cuid())
  name            String
  address         String
  lat             Float
  lng             Float
  googlePlaceId   String      @unique
  description     String?
  primaryImageUrl String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cityId          String
  listItems       ListPlace[]
  city            City        @relation(fields: [cityId], references: [id])

  @@index([cityId])
  @@index([lat, lng])
}

model List {
  id            String      @id @default(cuid())
  name          String
  description   String?
  genre         String?
  subgenre      String?
  cityId        String
  lat           Float?
  lng           Float?
  creatorId     String
  averageRating Float       @default(0)
  ratingCount   Int         @default(0)
  likeCount     Int         @default(0)
  placeCount    Int         @default(0)
  coverImage    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  city          City        @relation(fields: [cityId], references: [id])
  creator       User        @relation(fields: [creatorId], references: [id])
  likes         ListLike[]
  places        ListPlace[]

  @@index([cityId])
  @@index([creatorId])
}

model ListPlace {
  id         String   @id @default(cuid())
  listId     String
  placeId    String
  order      Int
  note       String?
  priceRange String?
  createdAt  DateTime @default(now())
  list       List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  place      Place    @relation(fields: [placeId], references: [id])

  @@unique([listId, placeId])
  @@index([listId, order])
}

model ListLike {
  userId    String
  listId    String
  createdAt DateTime @default(now())
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
  @@index([listId])
}

model UserLocation {
  id        String      @id @default(cuid())
  userId    String
  cityId    String
  status    LocalStatus
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  city City @relation(fields: [cityId], references: [id])

  @@unique([userId, cityId])
  @@index([userId])
  @@index([cityId])
}

enum LocalStatus {
  BORN_THERE
  LIVED_PAST
  CURRENTLY_LIVING
}
